Socks5d Proxy Monitoring And Configuration Protocol

Acknowledgments

    This memo describes a protocol that was designed for the University Subject 'Protocolos de Comunicaci√≥n'.  The key contributors are:
    Marcos Dedeu, Gonzalo Beade, Santiago Hadad and Salvador Castagnino. 

1.Terminology

The keywords MUST, MUST NOT, SHOULD, SHOULD NOT, MAY in this document will be interpreted as described in RFC 2119.
 
2. Introduction

    The goal of this protocol is to provide an interface for interacting with a running Socks5d Server. The client MAY ask for:
        o The total number of historical connections
        o The total number of concurrent connections
        o Amounts of bytes received by  server
        o Amounts of bytes sent by  server
        o The number of users connected
        o The list of all registered users
    The client SHOULD also be able to modify information or properties of the server on runtime, such as adding or deleting users, setting up password sniffing for at least POP3 protocol and activating or deactivating authentication for the socks5 proxy.
    In order to maintain security, authentication with the server upon connection is required. 
    Once authenticated, the connection follows a Request/Response structure, where the client makes the requests, and the Server processes and responds.
    Note:
       Unless otherwise noted, the decimal numbers appearing in packet-format diagrams represent the length of the corresponding field, in
       octets.  Where a given octet must take on a specific value, the syntax X'hh' is used to denote the value of the single octet in that
       field. When the word 'Variable' is used, it indicates that the  corresponding field has a variable length defined either by an
       associated (one or two octet) length field, or by a data type field. Every Octet MUST be interpreted as an unsigned int of 8 bits.


3. Connection and Authentication

   3.1. Connection
        When a TCP-based Client wishes to establish a connection to the socks5d Server it MUST open a TCP connection to the appropriate port on the server system. The Socks5d Administration service is conventionally located on port 8080.

   3.2. Authentication
        Once the connection with the socks5d server has started, the client produces an authentication request:

                +----------+------+----------+---------+----------+
                |   VER    | ULEN |  UNAME   | PASSLEN |  PASS    |
                +----------+------+----------+---------+----------+
                |   X'01'  |  1   | 1 to 255 |    1    | 1 to 255 |
                +----------+------+----------+---------+----------+
        
        The Ver field contains the current version of the negotiation, which is X'01'(1 byte). 
        The ULEN field contains a 1 byte which represents the length of the UNAME field that follows.
        The UNAME field contains the username as known to the Server. Only the ASCII charset is supported.
        The PASSLEN field contains a 1 byte  which represents the length of the PASS field that follows. 
        The PASSWD field contains the password associated with the given UNAME. Only the ASCII charset is supported.

        The server verifies the supplied UNAME and PASS, and if it corresponds to a user with administrator privileges it sends the following response: 
                
                                +--------+
                                | STATUS |
                                +--------+
                                |   2    |
                                +--------+

        A STATUS field of X'C0' X'01' indicates the authentication was successful.
        A STATUS field of X'4B' X'1D' indicates the authentication failed.
        
        If the server returns a failure status, it will wait for another authentication request.

        If the server returns a success status, then the session is established.

4. General Request and Response Structure

    Once the client is authenticated, the following messages will follow Request/Response structure.
    The client sends a Request and the server answers with a corresponding Response message.

    All messages from now on include the fields ACTION and METHOD which are 1 byte long. All bytes are interpreted as unsigned int of 8 bits.

    4.1. General Request Structure

        In the Request, these fields are the ones which indicate the server the action it must perform, the other fields are just arguments of that action.

            +--------+--------+----------+
            | ACTION | METHOD |  PARAMS  |
            +--------+--------+----------+
            |   1    |    1   | Variable |
            +--------+--------+----------+
        
        The values that these fields should take are specified on section 5 and section 6. 
          


    4.2 General Response Structure

        In the Response, the ACTION and METHOD fields MUST match the ones from their corresponding Request.
        The RLEN field are two bytes that should be interpreted as unsigned int of 16 bits in network order representing the length of the response.
            
            +--------+--------+--------+-------------+
            | ACTION | METHOD |  RLEN  |  RESPONSE   | 
            +--------+--------+--------+-------------+
            |   1    |   1    |   2    | 1 to 65535  |
            +--------+--------+--------+-------------+
            
        If a valid ACTION and METHOD is sent to the Server, the Server MUST respond with the following structure:

            o The fields ACTION and METHOD are those of the original request.
            o The field RLEN is set to the length (as unsigned int of 16 bits in network order) of the response.
            o The field RESPONSE will is specified on response sections. 

        If an invalid ACTION or METHOD is sent to the Server, the Server MUST respond with the following structure:

            +---------+--------+-----------+------------+
            | ACTION  | METHOD |  RLEN     |  RESPONSE  | 
            +---------+--------+-----------+------------+
            |  X'FF'  |  X'FF' | X'00'X'01'|    X'01'   |
            +---------+--------+-----------+------------+

       The values X'FF' for ACTION and METHOD MUST never be included in a Request message, as they are reserved to notify errors.


5. Modification:
        5.1 Requests

        Methods associated with the Modification ACTION are meant to modify the Server configuration. The general packet for modification is:   
        
            +--------+--------+----------+
            | ACTION | METHOD |  PARAMS  |
            +--------+--------+----------+
            |  X'BE' |    1   | Variable |
            +--------+--------+----------+

        The METHODS field can take the following values:
        
            o   X'00'   Add User.
            o   X'01'   Remove User.
            o   X'02'   Enable Password Spoofing.
            o   X'03'   Disable Password Spoofing.
            o   X'04'   Modify Proxy Authentication.
        The PARAMS field takes the corresponding values as described bellow.

        5.1.1 Add User

                +--------+--------+--------+----------+---------+----------+
                | ACTION | METHOD |  ULEN  |  UNAME   | PASSLEN |   PASS   |
                +--------+--------+--------+----------+---------+----------+
                |  X'BE' |  X'00' |   1    | 1 to 255 |    1    | 1 to 255 |
                +--------+--------+--------+----------+---------+----------+

                The ULEN field contains a 1 byte (unsigned int of 8 bits) which represents the length of the UNAME field that follows.
                The UNAME field contains the username as known to the Server. Only the ASCII charset is supported.
                The PASSLEN field contains a 1 byte (unsigned int of 8 bits)  which represents the length of the PASS field that follows. 
                The PASSWD field contains the password associated with the given UNAME. Only the ASCII charset is supported.

        5.1.2 Remove User

                +--------+--------+--------+----------+
                | ACTION | METHOD |  ULEN  |  UNAME   |
                +--------+--------+--------+----------+
                |  X'BE' |  X'01' |   1    | 1 to 255 |
                +--------+--------+--------+----------+

                The ULEN field contains a 1 byte (unsigned int of 8 bits) which represents the length of the UNAME field that follows.
                The UNAME field contains the username as known to the Server. Only the ASCII charset is supported.

        5.1.3 Enable Password Spoofing

                +--------+--------+--------+
                | ACTION | METHOD |  PCOL  |
                +--------+--------+--------+
                |  X'BE' |  X'02' |   1    |
                +--------+--------+--------+

                The PCOL field contains a 1 byte which represents the protocol for which we are spoofing passwords. In this version of the procotol (X'01'), the only possible value is X'00' , representing the POP3 protocol.

        5.1.4 Disable Password Spoofing

                +--------+--------+--------+
                | ACTION | METHOD |  PCOL  |
                +--------+--------+--------+
                |  X'BE' |  X'03' |   1    |
                +--------+--------+--------+

                The PCOL field contains a 1 byte which represents the protocol for which we are spoofing passwords. In this version of the procotol (X'01'), the only possible value is X'00' , representing the POP3 protocol.

        5.1.5 Modify Proxy Authentication

                +--------+--------+---------+
                | ACTION | METHOD |  NSIZE  |
                +--------+--------+---------+
                |  X'BE' |  X'04' |    1    |
                +--------+--------+---------+

                The NSIZE field contains 1 byte, containing a value of X'00' to deactivate the proxy authentication and a nonzero value to activate the proxy authentication. 

        5.2 Response
        
            On success server response with the following packet.
            
            +---------+--------+-----------+------------+
            | ACTION  | METHOD |  RLEN     |  RESPONSE  | 
            +---------+--------+-----------+------------+
            |  X'BE'  |   1    | X'00'X'01'|    X'01'   |
            +---------+--------+-----------+------------+
            
            where METHOD is the same value received by server. On failure packet is as described on section 4.

6. Querying

    6.1 Requests

        Methods associated with the Query ACTION are meant as data retrieval methods, meaning they won't affect the state of the server. These methods do not take any parameters, so the general packet is:
        
            +--------+--------+
            | ACTION | METHOD |
            +--------+--------+
            |  X'DO' |    1   |
            +--------+--------+
        
        The METHODS field can take the following values:

            o   X'01'   Get Total Historic Connections  
            o   X'02'   Get Current Connections         
            o   X'03'   Get Max. Concurrent Connections 
            o   X'04'   Get Total Bytes Sent            
            o   X'05'   Get Total Bytes Received        
            o   X'06'   Get Number of Users Connected   
            o   X'07'   Get User List                   

    6.2 Response

        The Querying requests follow the General Response Structure detailed in Section 4.2.
        If method takes a value between X'01' - X'06'. The general response is: 
            +---------+--------+-----------+------------+
            | ACTION  | METHOD |  RLEN     |  RESPONSE  | 
            +---------+--------+-----------+------------+
            |  X'D0'  |   1    |    2      |    X'01'   |
            +---------+--------+-----------+------------+
        Where METHOD field is the same received by the server. The RESPONSE MUST be interpreted as an unsigned int of n bits, where n is the 
        value of the RLEN field.
        If method equals X'07'. The RESPONSE MUST have the following format: A byte as an unsigned int representing the length of the following 
        name. Only ASCII charset is supported. The RLEN MUST consider the whole answer (i.e the bytes indicating the usernames length, and the 
        usernames characters).
        On failure packet is as described on section 4.
        
        

